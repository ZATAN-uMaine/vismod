- name: "Update server packages"
  hosts: prod
  become: true
  tasks:
    - apt:
        name: "*"
        state: latest
        update_cache: true
    - apt:
        name: "apt-transport-https" # need for 3rd party apt repos
        state: latest

- name: "Install InfluxDB 2.x"
  hosts: prod
  become: true
  tasks:
    - name: "Download influx apt key"
      get_url:
        url: "https://repos.influxdata.com/influxdata-archive_compat.key"
        dest: /etc/apt/keyrings/influx.asc
    - name: "Add influx apt repository"
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/influx.asc] https://repos.influxdata.com/debian stable main"
        state: present
    - name: "Install influx packages"
      apt:
        update_cache: true
        state: present
        name:
          - influxdb2
          - influxdb2-cli
          - telegraf
    - name: "Copy influxdb config file"
      copy:
        src: "influx-config.toml"
        dest: "/etc/influxdb/config.toml"
      register: "influx_config_copy_res"
    - name: "Restart Influx if necessary"
      systemd:
        name: "influxdb"
        state: "restarted"
      when: "influx_config_copy_res.changed"
    - name: "Make sure Influx is running"
      systemd:
        name: "influxdb"
        state: "started"
        enabled: true
      # zatan / Zatan123#
      # setup only runs once. After the initial run, it will return an error
    - name: "Influx initial setup"
      shell: >-
        influx setup 
        --username zatan
        --password Zatan123!
        --org zatan
        --bucket pnb
        --force
      ignore_errors: true

- name: "Install nginx"
  hosts: "prod"
  become: true
  tasks:
    - name: "Add Nginx packages"
      apt:
        name:
          - nginx-light
          - certbot
          - python3-certbot-nginx
    #- name: "Remove default nginx config file"
    #  file:
    #    path: "/etc/nginx/sites-enabled/default"
    #    state: absent
    - name: "Install nginx config file"
      template:
        src: "nginx.conf"
        dest: "/etc/nginx/sites-enabled/pnb.conf"
      register: "nginx_copy_res"
      # this will fail the playbook if there is a config error
    - name: "Check Nginx config file syntax"
      shell: "nginx -T"
      changed_when: false
    - name: "Add TLS config to Nginx"
      shell: "certbot install --cert-name {{ www_location }}"
      when: "nginx_copy_res.changed"
    # this works whether or not ufw is active
    - name: "Configure UFW for web server"
      community.general.ufw:
        rule: "allow"
        direction: "in"
        port: "{{ item }}"
        proto: tcp
      loop:
        - 22
        - 80
        - 443
    - name: "Reload nginx"
      systemd:
        name: "nginx"
        state: "reloaded"
        enabled: true

- name: "Install grafana"
  hosts: prod
  become: true
  tasks:
    - name: "Download grafana apt key"
      get_url:
        url: "https://apt.grafana.com/gpg.key"
        dest: "/etc/apt/keyrings/grafana.asc"
    - name: "Enable grafana apt repo"
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/grafana.asc] https://apt.grafana.com stable main"
        state: present
    - name: "Install grafana OSS package"
      apt:
        update_cache: true
        state: present
        name: grafana
    - name: "Create grafana config file"
      template:
        src: "grafana.ini"
        dest: "/etc/grafana/grafana.ini"
        mode: "0640"
      register: grafana_config_copy
    - name: "Restart grafana if necessary"
      systemd:
        name: grafana-server
        state: restarted
      when: "grafana_config_copy.changed"
    - name: "Enable and run Grafana"
      systemd:
        name: "grafana-server"
        enabled: true
        state: started

- name: "Install Python services"
  hosts: prod
  become: true
  tasks:
    - debug:
        msg: "TODO"
